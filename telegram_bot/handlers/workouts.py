import os
from datetime import datetime
from typing import Union

from aiogram import types, Router
import httpx
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from telegram_bot.handlers.handler_dispatcher import get_workouts_keyboard, get_back_button
from aiogram.types import (CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message, InputFile, FSInputFile)
from telegram_bot.logger import logger, log_user_action

router = Router()


@router.callback_query(lambda c: c.data == 'workouts')
async def workouts_page(callback_query: types.CallbackQuery):
    workouts = get_workouts_keyboard()

    await callback_query.message.answer(workouts['text'], reply_markup=workouts['keyboard'])


param_names = {
    "hips": "–û–±—ä–µ–º –±–µ–¥–µ—Ä",
    "chest": "–û–±—ä–µ–º –≥—Ä—É–¥–∏",
    "biceps": "–ë–∏—Ü–µ–ø—Å (–Ω–µ–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π)",
    "biceps_tense": "–ë–∏—Ü–µ–ø—Å (–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω—ã–π)",
    "waist": "–û–±—ä–µ–º —Ç–∞–ª–∏–∏",
    "thighs": "–û–±—ä–µ–º –±–µ–¥—Ä–∞",
    "calf": "–û–±—ä–µ–º –∏–∫—Ä—ã",
    "weight": "–í–µ—Å"
}


async def get_body_measurements_buttons(user_id: int) -> Union[
    dict[str, Union[InlineKeyboardMarkup, str]], InlineKeyboardMarkup]:
    async with httpx.AsyncClient() as client:
        response = await client.get(f"http://web:8000/workout/measure", params={"user_id": user_id})
        if response.status_code == 200 and response.json():
            measurements = response.json()
            measurements_id = measurements.get('id')
            measurements.pop("id", None)
        else:
            measurements_add_button = types.InlineKeyboardButton(text="‚ûï –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                                                                 callback_data="add_measurements")
            back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workouts")
            text = "üö´ –£ –≤–∞—Å –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ üìè\n""–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
            return {'keyboard': types.InlineKeyboardMarkup(inline_keyboard=[[measurements_add_button], [back_button]]),
                    'text': text}

    measurements_buttons = [
        [types.InlineKeyboardButton(text=f"{param_names.get(measure, measure)} - {value}",
                                    callback_data=f"measure_{measure}_{measurements_id}")]
        for measure, value in measurements.items() if measure in param_names
    ]

    back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workouts")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=measurements_buttons + [[back_button]])
    text = "üìè –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞ üìè\n‚úèÔ∏è –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä üëá\n"

    return {'keyboard': keyboard, 'text': text}


@router.callback_query(lambda c: c.data == 'measurements')
async def show_measurements(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    buttons = await get_body_measurements_buttons(user_id)

    await callback_query.message.answer(buttons['text'],
                                        reply_markup=buttons['keyboard'])


@router.callback_query(lambda c: c.data and c.data.startswith('cancel_'))
async def process_cancel(callback_query: CallbackQuery, state: FSMContext):
    mode = callback_query.data.split('_')[1]

    if mode == 'exercise':
        workouts = get_workouts_keyboard()
        await callback_query.message.answer("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ üö´\n\n")
        await callback_query.message.answer(workouts['text'], reply_markup=workouts['keyboard'])

    else:
        word = "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" if mode == "update" else "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
        text = f"üö´ –û—Ç–º–µ–Ω–µ–Ω–æ {word} üö´\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—èüëá"

        user_id = callback_query.from_user.id
        result = await get_body_measurements_buttons(user_id)

        await callback_query.message.answer(text, reply_markup=result['keyboard'])
    await state.clear()


# –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
class MeasurementUpdate(StatesGroup):
    waiting_for_value = State()


@router.callback_query(lambda c: c.data and c.data.startswith('measure_'))
async def update_measure(callback_query: types.CallbackQuery, state: FSMContext):
    _, measure_code, measurements_id = callback_query.data.split('_', 2)

    await state.update_data(id=measurements_id, code=measure_code)

    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_update")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])

    await callback_query.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"{param_names.get(measure_code, measure_code)}\"",
        reply_markup=keyboard
    )

    await state.set_state(MeasurementUpdate.waiting_for_value)


@router.message(StateFilter(MeasurementUpdate.waiting_for_value))
async def process_param_sent(message: types.Message, state: FSMContext):
    param_value = message.text.strip()
    if not param_value.isdigit() or not float(param_value) > 0:
        await message.answer("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ö†Ô∏è")
        return

    await state.update_data(value=float(param_value))

    param_data = await state.get_data()

    if await update_measurements_param(param_data):
        await message.answer(text='–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ')
        user_id = message.from_user.id
        result = await get_body_measurements_buttons(user_id)
        await message.answer("–í–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞:", reply_markup=result['keyboard'])
    else:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚ùå')
        user_id = message.from_user.id
        result = await get_body_measurements_buttons(user_id)
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                             reply_markup=result['keyboard'])

    await state.clear()


async def update_measurements_param(data):
    async with httpx.AsyncClient() as client:
        response = await client.put(f"http://web:8000/workout/measure/{data['id']}",
                                    json={data['code']: data['value']})
        return response.status_code == 201


# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def get_cancel_button_for_add_process():
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_add")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
    return keyboard


class MeasurementInput(StatesGroup):
    waiting_for_input = State()


@router.callback_query(lambda c: c.data == "add_measurements")
async def start_adding_measurements(callback_query: types.CallbackQuery, state: FSMContext):
    first_param = list(param_names.keys())[0]
    await state.update_data(current_param=first_param)

    await callback_query.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"{param_names[first_param]}\". –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤–≤–µ–¥–∏—Ç–µ 0.",
        reply_markup=get_cancel_button_for_add_process()
    )
    await state.set_state(MeasurementInput.waiting_for_input)


@router.message(StateFilter(MeasurementInput.waiting_for_input))
async def receive_measurement_input(message: types.Message, state: FSMContext):
    param_value = message.text.strip()
    user_data = await state.get_data()
    current_param = user_data["current_param"]

    if not param_value.isdigit() or int(param_value) < 0:
        await message.answer("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º 0(–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å) –∏ –≤—ã—à–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ö†Ô∏è")
        return

    user_data[current_param] = param_value
    await state.update_data(user_data)

    param_index = list(param_names.keys()).index(current_param)
    if param_index + 1 < len(param_names):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
        next_param = list(param_names.keys())[param_index + 1]
        await state.update_data(current_param=next_param)
        await message.answer(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"{param_names[next_param]}\". –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, –≤–≤–µ–¥–∏—Ç–µ 0.",
            reply_markup=get_cancel_button_for_add_process()
        )
    else:
        user_data = await state.get_data()
        user_data.pop('current_param', None)
        logger.info(user_data)
        user_id = message.from_user.id

        if await add_measurements_param(user_data, user_id):
            text = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω—ã ‚úÖ\n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:"
        else:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚ùå"

        result = await get_body_measurements_buttons(user_id)
        await message.answer(text=text, reply_markup=result['keyboard'])

        await state.clear()


async def add_measurements_param(data, user_id):
    async with httpx.AsyncClient() as client:
        response = await client.post(f"http://web:8000/workout/measure", params={"user_id": user_id},
                                     json=data)
        return response.status_code == 201


# –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
def get_cancel_add_exercise_keyboard():
    cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_exercise")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
    return keyboard


class ExerciseInput(StatesGroup):
    waiting_for_title = State()
    waiting_for_sets = State()
    waiting_for_repetitions = State()
    waiting_for_weight = State()
    waiting_for_date = State()


@router.callback_query(lambda c: c.data == "add_exercise")
async def start_adding_exercise(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        reply_markup=get_cancel_add_exercise_keyboard()
    )
    await state.set_state(ExerciseInput.waiting_for_title)


@router.message(StateFilter(ExerciseInput.waiting_for_title))
async def process_title_sent(message: Message, state: FSMContext):

    title = message.text.strip()
    if len(message.text.strip()) < 2:
        await message.answer(
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ö†Ô∏è")
        return

    await state.update_data(exercise_name=title)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ üî¢",
        reply_markup=get_cancel_add_exercise_keyboard()
    )

    await state.set_state(ExerciseInput.waiting_for_sets)


@router.message(StateFilter(ExerciseInput.waiting_for_sets))
async def process_sets_sent(message: Message, state: FSMContext):

    sets = message.text.strip()
    if not sets.isdigit() or int(sets) <= 0:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ –Ω–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ö†Ô∏è")
        return

    await state.update_data(sets=int(sets))
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π üî¢",
        reply_markup=get_cancel_add_exercise_keyboard()
    )

    await state.set_state(ExerciseInput.waiting_for_repetitions)


@router.message(StateFilter(ExerciseInput.waiting_for_repetitions))
async def process_repetitions_sent(message: Message, state: FSMContext):

    repetitions = message.text.strip()
    if not repetitions.isdigit() or int(repetitions) <= 0:
        await message.answer("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ –Ω–æ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ö†Ô∏è")
        return

    await state.update_data(repetitions=int(repetitions))
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å, –µ—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –±–µ–∑ –≤–µ—Å–∞, —Ç–æ —É–∫–∞–∂–∏—Ç–µ 0 üî¢",
        reply_markup=get_cancel_add_exercise_keyboard()
    )

    await state.set_state(ExerciseInput.waiting_for_weight)


def get_date_keyboard():
    today_button = InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="date_today")
    input_date_button = InlineKeyboardButton(text="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É", callback_data="date_input")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[today_button], [input_date_button]])
    return keyboard


@router.message(StateFilter(ExerciseInput.waiting_for_weight))
async def process_weight_sent(message: types.Message, state: FSMContext):
    weight = message.text.strip()
    if not weight.isdigit() or not int(weight) >= 0:
        await message.answer("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ö†Ô∏è")
        return

    await state.update_data(weight=int(weight))

    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=get_date_keyboard())
    await state.set_state(ExerciseInput.waiting_for_date)


@router.callback_query(lambda c: c.data == "date_today", StateFilter(ExerciseInput.waiting_for_date))
async def date_today_selected(callback_query: types.CallbackQuery, state: FSMContext):
    formatted_date = datetime.now().strftime("%Y-%m-%dT00:00:00")
    await state.update_data(workout_date=formatted_date)
    logger.info(await state.get_data())


@router.callback_query(lambda c: c.data == "date_input", StateFilter(ExerciseInput.waiting_for_date))
async def date_input_selected(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                                        reply_markup=types.ReplyKeyboardRemove())


@router.message(StateFilter(ExerciseInput.waiting_for_date))
async def process_date_sent(message: types.Message, state: FSMContext):
    date_input = message.text.strip().lower()
    try:
        workout_date = datetime.strptime(date_input, "%d.%m.%Y")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (08.12.2024) ‚ö†Ô∏è")
        return

    formatted_date = workout_date.strftime("%Y-%m-%dT00:00:00")
    await state.update_data(workout_date=formatted_date)
    logger.info(await state.get_data())
    param_data = await state.get_data()

    user_id = message.from_user.id
    if await add_exercise(param_data, user_id):
        await message.answer(text='–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ\n\n')
    else:
        await message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚ùå\n\n')
    workouts = get_workouts_keyboard()

    await message.answer(workouts['text'], reply_markup=workouts['keyboard'])

    await state.clear()


async def add_exercise(data, user_id):
    logger.info(data)
    async with httpx.AsyncClient() as client:
        response = await client.post(f"http://web:8000/workout/", params={'user_id': user_id},
                                     json=data)
        return response.status_code == 201


# –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def get_filtres_buttons():
    text = "üìä –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º(pdf) üìä"

    back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="workouts")
    last_workout_button = types.InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                                                     callback_data="show_workout_last-workout")
    show_curweek_button = types.InlineKeyboardButton(text="–ó–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é",
                                                     callback_data="show_workout_current-week")
    show_lastweek_button = types.InlineKeyboardButton(text="–ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", callback_data="show_workout_last-week")
    show_curmonth_button = types.InlineKeyboardButton(text="–ó–∞ —Ç–µ–∫—É—â—ã–π –º–µ—Å—è—Ü",
                                                      callback_data="show_workout_current-month")
    show_lastmonth_button = types.InlineKeyboardButton(text="–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü",
                                                       callback_data="show_workout_last-month")
    show_all_workouts_button = types.InlineKeyboardButton(text="–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="show_workout_all")
    show_date_button = types.InlineKeyboardButton(text="–ü–æ –¥–∞—Ç–µ", callback_data="show_workout_date")
    name_exercise_button = types.InlineKeyboardButton(text="–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="show_workout_exercise-name")

    keyboard_buttons = [
        [show_date_button], [name_exercise_button],
        [last_workout_button], [show_curweek_button], [show_lastweek_button], [show_curmonth_button],
        [show_lastmonth_button], [show_all_workouts_button],
        [back_button]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    return {'text': text, 'keyboard': keyboard}


@router.callback_query(lambda c: c.data == "show_exercises")
async def show_exercises_filters(callback_query: types.CallbackQuery):
    buttons = await get_filtres_buttons()

    await callback_query.message.answer(buttons['text'],
                                        reply_markup=buttons['keyboard'])


class WorkoutFilters(StatesGroup):
    waiting_for_input = State()


@router.callback_query(lambda c: c.data and c.data.startswith('show_workout_'))
async def filter_workouts(callback_query: types.CallbackQuery, state: FSMContext):
    filter_type = callback_query.data.split("_")[-1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if filter_type in ["date", "exercise-name"]:
        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤–≤–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(WorkoutFilters.waiting_for_input)
        await state.update_data(filter_type=filter_type)

        prompt_text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)" if filter_type == "date" else "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
        cancel_button = InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="show_exercises")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[cancel_button]])
        await callback_query.message.answer(prompt_text, reply_markup=keyboard)
    else:
        back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_exercises")
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])
        file = await get_workouts_by_filter(callback_query.from_user.id, filter_type, 'period', callback_query)
        if file:
            await callback_query.bot.send_document(callback_query.from_user.id, FSInputFile(file))
            await callback_query.message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
        else:
            await callback_query.message.answer('üòî –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=keyboard)


@router.message(StateFilter(WorkoutFilters.waiting_for_input))
async def receive_filter_input(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    filter_type = user_data.get("filter_type")

    if filter_type == "date":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
        date_input = message.text.strip().lower()
        try:
            workout_date = datetime.strptime(date_input, "%d.%m.%Y")
        except ValueError:
            await message.answer(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (08.12.2024) ‚ö†Ô∏è")
            return
        await state.update_data(target=date_input)

    elif filter_type == "exercise-name":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        input_name = message.text.strip()
        if len(message.text.strip()) < 2:
            await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ö†Ô∏è")
            return
        await state.update_data(target=input_name)

    back_button = types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_exercises")
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])
    data = await state.get_data()
    file = await get_workouts_by_filter(message.from_user.id, data['target'], filter_type, message)

    if file:
        await message.answer_document(FSInputFile(file))
        await message.answer('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=keyboard)
    else:
        await message.answer('üòî –ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=keyboard)
    await state.clear()


async def get_workouts_by_filter(user_id, filter, type, obj):
    logger.info(type)
    params = {'user_id': user_id}
    if type == 'period' and filter != 'all':
        params['period'] = filter
    elif type == 'date':
        params['date'] = filter
    elif type == 'exercise-name':
        params['exercise_name'] = filter

    headers = {'Accept': 'application/pdf'}
    async with httpx.AsyncClient() as client:
        response = await client.get(f"http://web:8000/workout/", params=params, headers=headers)
        if response.status_code == 200 and response.headers['Content-Type'] == 'application/pdf':
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ PDF —Ñ–∞–π–ª
            pdf_content = response.content

            # –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
            temp_pdf_path = f"temp_{obj.from_user.id}.pdf"

            # –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
            with open(temp_pdf_path, 'wb') as pdf_file:
                pdf_file.write(pdf_content)

            return temp_pdf_path
        return False



